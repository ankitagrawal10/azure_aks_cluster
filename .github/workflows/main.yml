name: Create AKS Cluster with Terraform

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  AKS-Cluster-Deployment:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: 'Az CLI login'
        run: |
          az login --tenant add67cd2-c8b2-416c-b171-b61b22be92f4

      - name: Update Azure CLI to the Latest Version
        run: |
          sudo apt-get update && sudo apt-get install --only-upgrade -y azure-cli

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.2
        with:
          terraform_version: latest

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Refresh Terraform State
        id: refresh
        run: terraform refresh

      - name: Terraform Plan
        id: plan
        run: terraform plan

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve

      - name: Debug Terraform Outputs
        run: |
         echo "=== Terraform Outputs ==="
         terraform output

      - name: Get AKS Cluster Name
        id: get_aks_name
        run: |
           AKS_CLUSTER_NAME=$(terraform output -json aks_cluster_name | jq -r .)
           if [ -z "$AKS_CLUSTER_NAME" ] || [[ "$AKS_CLUSTER_NAME" == *"Terraform exited with code"* ]]; then
              echo "Error: AKS Cluster Name is empty or invalid!"
              exit 1
           fi
              echo "AKS_CLUSTER_NAME=$AKS_CLUSTER_NAME" >> $GITHUB_ENV
              echo "Extracted AKS_CLUSTER_NAME: $AKS_CLUSTER_NAME"



      # Fetch and Export Resource Group Name
      - name: Get Resource Group Name
        id: get_rg_name
        run: |
          RESOURCE_GROUP_NAME=$(terraform output -raw resource_group_name)
          if [ -z "$RESOURCE_GROUP_NAME" ]; then
            echo "Error: Resource Group Name is empty!"
            exit 1
          fi
          echo "RESOURCE_GROUP_NAME=$RESOURCE_GROUP_NAME" >> $GITHUB_ENV
          echo "RESOURCE_GROUP_NAME: $RESOURCE_GROUP_NAME"  # Print the Resource Group Name

      - name: Build AKS Cluster and Push Image
        run: |
          docker build -t notes-app ./django-notes-app/
          docker tag notes-app:latest projectimage01.azurecr.io/notes-app:latest
          az acr login --name projectimage01
          docker push projectimage01.azurecr.io/notes-app:latest

      - name: Get AKS Credentials
        run: |
          az aks get-credentials --name "$AKS_CLUSTER_NAME" --resource-group "$RESOURCE_GROUP_NAME"

      # Fetch and Export ACR Credentials (Username and Password)
      - name: Fetch ACR Credentials
        id: fetch_credentials
        run: |
          ACR_USERNAME=$(terraform output -raw username)
          ACR_PASSWORD=$(terraform output -raw password)
          echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_ENV
          echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_ENV
          echo "ACR_USERNAME: $ACR_USERNAME"  # Print the ACR Username (Avoid printing the password for security reasons)

      - name: Docker login
        run: |
          echo $ACR_PASSWORD | docker login projectimage01.azurecr.io --username $ACR_USERNAME --password-stdin

      - name: Create Kubernetes Docker Registry Secret
        run: |
          kubectl create secret docker-registry regcred \
            --docker-server=projectimage01.azurecr.io \
            --docker-username=$ACR_USERNAME \
            --docker-password=$ACR_PASSWORD \
            --docker-email=ankit.agrawal@netsmartz.net \
            --namespace=notes-app

      - name: Deploy Application to AKS
        run: |
          kubectl apply -f django.notes.yaml
          kubectl get node -n notes-app
          kubectl get pods -n notes-app
          kubectl get svc -n notes-app
